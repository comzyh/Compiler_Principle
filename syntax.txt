auto:key_word break:key_word case:key_word char:key_word const:key_word continue:key_word default:key_word do:key_word double:key_word else:key_word enum:key_word extern:key_word float:key_word for:key_word goto:key_word if:key_word int:key_word long:key_word register:key_word return:key_word short:key_word signed:key_word sizeof:key_word static:key_word struct:key_word switch:key_word typedef:key_word union:key_word unsigned:key_word void:key_word volatile:key_word while:key_word number:const string:const id:id =:operator +:operator -:operator *:operator /:operator %:operator <<:operator (:limiter ):limiter <:limiter >:limiter [:limiter ]:limiter {:limiter }:limiter ;:limiter ,:limiter #:file_end
S
S = function S
S = $
function = type id ( args ) { block }
args = $
args = arg args_tail
args_tail = , arg args_tail
args_tail = $
arg = var
type = int
type = double
type = void
type = char
block = $
block = stmt block
stmt = { block }
stmt = declare ;
declare = type var vars
var = id
var = id [ ]
var = id [ number ]
vars = , var vars
vars = $
stmt = exp ;
exp = id = exp
exp = id << exp
exp = id
exp = number
exp = string
exp = id + exp
exp = ( exp )
stmt = return exp ;
return_value = $
return_value = exp ;
for_exp = for ( exp ; exp ; exp ) compound_stmt
while_exp = while ( exp ) compound_stmt
compound_stmt = { block }
compound_stmt = stmt
